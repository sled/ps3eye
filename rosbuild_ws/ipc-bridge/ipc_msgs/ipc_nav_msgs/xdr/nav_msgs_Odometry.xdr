%{
#include <ipc_bridge/msgs/roslib_Header.h>
#include <ipc_bridge/msgs/geometry_msgs_PoseWithCovariance.h>
#include <ipc_bridge/msgs/geometry_msgs_TwistWithCovariance.h>
%}

ipc_type roslib_Header;
ipc_type geometry_msgs_PoseWithCovariance;
ipc_type geometry_msgs_TwistWithCovariance;

struct nav_msgs_Odometry
{
 roslib_Header header;
 string child_frame_id<>;
 geometry_msgs_PoseWithCovariance pose;
 geometry_msgs_TwistWithCovariance twist;

%{
  nav_msgs_Odometry() : child_frame_id(0) 
  {
    child_frame_id = new char[1];
    child_frame_id[0] = '\0';
  }
  nav_msgs_Odometry(const nav_msgs_Odometry& msg) :
    header(msg.header), pose(msg.pose), twist(msg.twist)
  {    
    child_frame_id = new char[strlen(msg.child_frame_id) + 1];
    strcpy(child_frame_id, msg.child_frame_id);
  }
  ~nav_msgs_Odometry()
  {
    if (child_frame_id != 0)
      delete[] child_frame_id;
  }
  nav_msgs_Odometry& operator= (const nav_msgs_Odometry& msg)
  {
    header = msg.header;
    pose = msg.pose;
    twist = msg.twist;

    if (child_frame_id != 0)
      delete[] child_frame_id;
    
    child_frame_id = new char[strlen(msg.child_frame_id) + 1];
    strcpy(child_frame_id, msg.child_frame_id);

    return *this;
  }
%}

};

%{
namespace ipc_bridge
{
    namespace nav_msgs
    {
        typedef nav_msgs_Odometry Odometry;
    }
}
%}

