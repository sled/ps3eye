/* automatically generated by xdrgen from xdr/nav_msgs_Odometry.xdr
 * xdrgen cvs version: $Revision: 1.7 $ $Date: 2009/01/12 15:54:59 $
 * xdr/nav_msgs_Odometry.xdr last modified: Thu Nov 11 11:15:54 2010
 */

#ifndef INCnav_msgs_Odometry_h
#define INCnav_msgs_Odometry_h



#include <ipc_bridge/msgs/roslib_Header.h>
#include <ipc_bridge/msgs/geometry_msgs_PoseWithCovariance.h>
#include <ipc_bridge/msgs/geometry_msgs_TwistWithCovariance.h>


struct nav_msgs_Odometry {
  roslib_Header header;
  char *child_frame_id;
  geometry_msgs_PoseWithCovariance pose;
  geometry_msgs_TwistWithCovariance twist;
#define nav_msgs_Odometry_IPC_FORMAT "{" roslib_Header_IPC_FORMAT ",string," geometry_msgs_PoseWithCovariance_IPC_FORMAT "," geometry_msgs_TwistWithCovariance_IPC_FORMAT "}"
  static const char *getIPCFormat(void) {
    return nav_msgs_Odometry_IPC_FORMAT;
  }


  nav_msgs_Odometry() : child_frame_id(0) 
  {
    child_frame_id = new char[1];
    child_frame_id[0] = '\0';
  }
  nav_msgs_Odometry(const nav_msgs_Odometry& msg) :
    header(msg.header), pose(msg.pose), twist(msg.twist)
  {    
    child_frame_id = new char[strlen(msg.child_frame_id) + 1];
    strcpy(child_frame_id, msg.child_frame_id);
  }
  ~nav_msgs_Odometry()
  {
    if (child_frame_id != 0)
      delete[] child_frame_id;
  }
  nav_msgs_Odometry& operator= (const nav_msgs_Odometry& msg)
  {
    header = msg.header;
    pose = msg.pose;
    twist = msg.twist;

    if (child_frame_id != 0)
      delete[] child_frame_id;
    
    child_frame_id = new char[strlen(msg.child_frame_id) + 1];
    strcpy(child_frame_id, msg.child_frame_id);

    return *this;
  }

};


namespace ipc_bridge
{
    namespace nav_msgs
    {
        typedef nav_msgs_Odometry Odometry;
    }
}


#endif /* INCnav_msgs_Odometry_h */
